import numpy as np
import pandas as pd

def loadStreamFile(filename):
    '''
    The MC `clustermove` generates an output stream if run with the `file` keyword.
    This function loads this (potentially gzip compressed) file into a Pandas DataFrame.
    
    Parameters
    ----------
    filename : str
        Input file generated by the clustermove using the `file` keyword (.dat|.gat.gz)

    Returns
    -------
    pandas.DataFrame
        Contents of the entire file as a dataframe
        
    '''
    data = np.loadtxt(filename, skiprows=1)
    df = pd.DataFrame(data, columns=["cluster_size", "seed", "shape_anisotropy"])
    return df

def plotShapeAnisotropy(df, cluster_size, **kwargs):
    '''
    Plots normalized shape anisotropy distribution for a given cluster size

    Parameters
    ----------
    df : pandas.DataFrame
        Dataframe of the entire stream file; usually from `loadStreamFile`
    cluster_size : int
        Cluster size to analyse
    **kwargs
        All other plotting keyword arguments to be passed to matplotlib.pyplot.hist()

    Returns
    -------
    matplotlib.axis
        Axis object
    '''
    filtered = df[df.cluster_size==cluster_size] # analyse specific cluster size
    weights = np.ones_like(filtered.index) / len(filtered.index) # normalize to unity
    ax = filtered.hist(column="shape_anisotropy", weights = weights, **kwargs)[0][0]
    ax.set_xlabel("Shape Anisotropy")
    ax.set_ylabel("Probability")
    ax.set_title("Shape Anisotropy ($N$={})".format(cluster_size));
    return ax

def plotSizeDistribution(df, **kwargs):
    '''
    Plots normalized cluster size distribution

    Parameters
    ----------
    df : pandas.DataFrame
        Dataframe of the entire stream file; usually from `loadStreamFile`
    **kwargs
        All other plotting keyword arguments to be passed to matplotlib.pyplot.hist()

    Returns
    -------
    matplotlib.axis
        Axis object
    '''
    weights = np.ones_like(df.index) / len(df.index) # normalize to unity
    ax = df.hist(column="cluster_size", weights = weights, **kwargs)[0][0]
    ax.set_xlabel("Cluster Size, $N$")
    ax.set_ylabel("Probability")
    ax.set_title("Cluster Size Distribution");
    return ax

def statistics(df):
    '''
    Generates a dataframe with statistics about cluster size and shape.
    The most probable cluster size is marked in RED
    
    Parameters
    ----------
    df : pandas.DataFrame
        Dataframe of the entire stream file; usually from `loadStreamFile`
        
    Returns
    -------
    pandas.DataFrame
        Contents with statistics
    '''
    s1 = df.groupby(["cluster_size"]).shape_anisotropy.mean()
    s2 = df.groupby(["cluster_size"]).seed.count()
    d = pd.concat([s1, s2], axis=1)
    d.columns = ['mean shape anisotropy', 'counts']
    d.index = d.index.astype(int) # index is the cluster size
    d["probability"] = d["counts"] / d["counts"].sum()
    print("Average cluster size = {:.3}".format((d.index * d["probability"]).sum()))
    return d.style.highlight_max("probability", color = 'red', axis = 0)
